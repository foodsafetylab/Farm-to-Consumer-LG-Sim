#d
1-pbinom(q = 3,size = 7,prob = 0.6703)
#d
1-pbinom(q = 2,size = 7,prob = 0.6703)
#d
1-pbinom(q = 4,size = 7,prob = 0.6703)
#d
pbinom(q = 4,size = 7,prob = 0.6703)
#d
pbinom(q = 5,size = 7,prob = 0.6703)
#c
dbinom(x = 6,size = 7,prob = 0.6703)
#c
dbinom(x = 7,size = 7,prob = 0.6703)
#d
pbinom(q = 5,size = 7,prob = 0.6703)
#d
1-pbinom(q = 5,size = 7,prob = 0.6703)
1-0.06079733-0.2093304-0.3088896
#d
1-pbinom(q = 5,size = 7,prob = 0.6703)
#d
1-pbinom(q = 4,size = 7,prob = 0.6703)
#d
pbinom(q = 4,size = 7,prob = 0.6703)
#e
dpois(x = 3,lambda = 5.6)
#f
ppois(q = 3,lambda = 2.8)
#g
pgamma(q = 11,shape = 4,rate = 0.4)-pgamma(q = 10,shape = 4,rate = 0.4)
ppois(q = 4,lambda = 4) - ppois(q = 4,lambda = 4.4)
ppois(q = 3,lambda = 4) - ppois(q = 3,lambda = 4.4)
#h
pgamma(q = 2,shape = 2,rate = 2.8)-pgamma(q = 1,shape = 2,rate = 2.8)
ppois(q = 1,lambda = 2.8) - ppois(q = 1,lambda = 5.6)
#d
pbinom(q = 4,size = 7,prob = 0.6703)
#d
1-pbinom(q = 4,size = 7,prob = 0.6703)
#f
ppois(q = 3,lambda = 5.6)
#h
pgamma(q = 2,shape = 6,rate = 2.8)-pgamma(q = 1,shape = 6,rate = 2.8)
#h
pgamma(q = 2,shape = 6,rate = 2.8)-pgamma(q = 1,shape = 6,rate = 2.8)
pgamma(q = 2,shape = 12,rate = 6.25)
1-pgamma(q = 2,shape = 12,rate = 6.25)
1-pgamma(q = 3,shape = 12,rate = 6.25)
1-pgamma(q = 2,shape = 12,rate = 6.25)
(37.76+38.4)/(8/sqrt(49))
(37.76-38.4)/(8/sqrt(49))
(42.24.-38.4)/(8/sqrt(49))
(42.24-38.4)/(8/sqrt(49))
(8/sqrt(49))
(8/sqrt(49))
(37.76-40.8)/(8/sqrt(49))
(42.24-40.8)/(8/sqrt(49))
(37.76-42.4)/(8/sqrt(49))
(42.24-42.4)/(8/sqrt(49))
1-.979
ppois(q = 6,lambda = 1/4)
dpois(q = 6,lambda = 1/4)
dpois(x = 6,lambda = 1/4)
ppois(q = 6,lambda = 1/4)
ppois(q = 8,lambda = 1/4)
ppois(q = 8,lambda = 6)
1-ppois(q = 8,lambda = 6)
1-ppois(q = 7,lambda = 6)
1-ppois(q = 7,lambda = 8)
1-ppois(q = 19,lambda = 16)
1-ppois(q = 19,lambda =20)
1-ppois(q = 8,lambda =4)
1-ppois(q = 15,lambda =12)
1-pgamma(36,2,1/3)
1-pgamma(q = 36,shape = 2,rate = 3)
1-pgamma(q = 36,shape = 8,rate = 1/3)
1-pgamma(q = 36,shape = 8,rate = 1/4)
qgamma(p = 0.95, shape = 8,rate = 1/3)
1-pgamma(q = 42,shape = 8,rate = 1/3)
1-ppois(q = 16,lambda =12)
1/1.4
qchisq(0.95,4)
2*1.4
qchisq(0.95,4)/2.8
3.388475*8
pchisq(q=27.10, df = 10)
3.388475*4
pchisq(q=27.10, df = 4)
pchisq(q=13.5539, df = 4)
pchisq(q=3.380, df = 4)
qchisq(0.95,4)/2.8
qchisq(0.95,4)
qchisq(0.95,4)
1/1.4
2/(1/1.4)
qchisq(0.95,20)
qchisq(0.95,20)/2.8
11.21801*11
pchisq(q=123.3981, df = 20)
11.21801*4
pchisq(q=44.87204, df = 20)
pchisq(q=11.218, df = 20)
pchisq(q=11.21801, df = 20)
qchisq(0.95,20)/2.8
qchisq(0.95,20)
pchisq(q= 31.41043, df = 20)
qchisq(0.05,20)
qchisq(0.05,20)/2.8
11.21801*4
pchisq(q= 44.87204, df = 20)
11.21801*2.8
pchisq(q= 31.41043, df = 20)
pchisq(q= 11.218, df = 20)
qgamma(p = 0.05, shape = 8,rate = 1/3)
qchisq(0.05,20)
10.85081 /2.8
8*3.875289
pchisq(q= 31.00231, df = 20)
4*3.875289
pchisq(q= 15.50116, df = 20)
ln(1.3)
pchisq(q= 11.2, df = 20)
pchisq(q=15.21,df=15)
1- pchisq(q=15.21,df=15)
1- pchisq(q=35.41,df=24)
pchisq(q=35.41,df=24)
1- pchisq(q=36.41,df=24)
pchisq(q=36.41,df=24)
pbinom(q=14,size = 20, prob = 0.60)
pbinom(q=15,size = 20, prob = 0.60)
pbinom(q=15,size = 20, prob = 0.70)
1-dpois(20,12)
1-dpois(19,12)
1-dpois(20,16)
ppois(q = 20,16)
1-ppois(q = 20,16)
1-ppois(q = 7,lambda =6)
1-ppois(q = 9,lambda =4)
ppois(q = 9,lambda =4)
1-ppois(q = 9,lambda =4)
1-ppois(q = 8,lambda =4)
qchisq(15.78,14)
pchisq(15.78,14)
1- pchisq(15.78,14)
1- pchisq(24,14)
1- pchisq(16,14)
pchisq(31,20)
1-pchisq(q=15.78,df=14)
1-pchisq(q=6,df=14)
1-pchisq(q=24,df=14)
1-pchisq(q=16,df=14)
1-pchisq(q=26,df=14)
pchisq(8.5368,15)
1-pchisq(8.5368,15)
sample(1,3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(2,1:3)
sample(1:3)
sample(1,1:3)
sample(2,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
library (shiny)
> runExample("01_hello")
>runExample("01_hello")
runExample("01_hello")
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
install.packages("tidytuesdayR")
library(GGally)
library(ggplot2)
library(tidyverse)
#Loading the dataset
Dataset1<-read.csv("Draft_Dataset_Weights_CSV.csv")
#Correlation coefficients and simple plots
Data_Correlation<-cor(Dataset1$Change_Weight_Period,Dataset1$Protein_Density,use="complete.obs")
cor(Dataset1$ProteinG,Dataset1$Protein_Density,use="complete.obs")
plot(Dataset1$Change_Weight_Period,Dataset1$Protein_Density)
plot(Dataset1$Change_Weight_Period,Dataset1$Fiber_Density)
#Linear Model to Predict change in Weight based on Fiber Density
Linear_Mod_Protein<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density)
summary(Linear_Mod_Protein)
#base R plot
plot(y= Dataset1$Change_Weight_Period, x = Dataset1$Protein_Density)
abline(a  = Linear_Mod_Protein$coefficients[1],b  = Linear_Mod_Protein$coefficients[2], col = "red")
#ggplot, make it look prety
ggplot(Dataset1, aes(x = Protein_Density, y = Change_Weight_Period)) +
geom_point() +
stat_smooth(method = "lm", col = "red")+
labs(title = paste("Adj R2 = ",signif(summary(Linear_Mod_Protein)$adj.r.squared, 5),
"Intercept =",signif(Linear_Mod_Protein$coef[[1]],5 ),
" Slope =",signif(Linear_Mod_Protein$coef[[2]], 5),
" P =",signif(summary(Linear_Mod_Protein)$coef[2,4], 5)))+
ylab("Change in Weight [lb]")+
xlab("Protein Density")
head(Dataset1)
SurveyData<-read.csv("LogisticReg.csv")
head(SurveyData)
SurveyData<-SurveyData %>%
mutate(W_Change_12 =Weight_12-Initial_Weight, W_Change_Final =  Final_Weight-Initial_Weight, Protein_Green = NA, Fiber_Green =NA)
SurveyData<-func_green(df = SurveyData,
colno = 9, #column where protein density
treshold = 7, #7 g per clcal
newcol = 13) #New column
library(GGally)
library(ggplot2)
library(tidyverse)
#Loading the dataset
Dataset1<-read.csv("Draft_Dataset_Weights_CSV.csv")
#Correlation coefficients and simple plots
Data_Correlation<-cor(Dataset1$Change_Weight_Period,Dataset1$Protein_Density,use="complete.obs")
cor(Dataset1$ProteinG,Dataset1$Protein_Density,use="complete.obs")
plot(Dataset1$Change_Weight_Period,Dataset1$Protein_Density)
plot(Dataset1$Change_Weight_Period,Dataset1$Fiber_Density)
#Linear Model to Predict change in Weight based on Fiber Density
Linear_Mod_Protein<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density)
summary(Linear_Mod_Protein)
#base R plot
plot(y= Dataset1$Change_Weight_Period, x = Dataset1$Protein_Density)
abline(a  = Linear_Mod_Protein$coefficients[1],b  = Linear_Mod_Protein$coefficients[2], col = "red")
#ggplot, make it look prety
ggplot(Dataset1, aes(x = Protein_Density, y = Change_Weight_Period)) +
geom_point() +
stat_smooth(method = "lm", col = "red")+
labs(title = paste("Adj R2 = ",signif(summary(Linear_Mod_Protein)$adj.r.squared, 5),
"Intercept =",signif(Linear_Mod_Protein$coef[[1]],5 ),
" Slope =",signif(Linear_Mod_Protein$coef[[2]], 5),
" P =",signif(summary(Linear_Mod_Protein)$coef[2,4], 5)))+
ylab("Change in Weight [lb]")+
xlab("Protein Density")
#Linear model for multiple predictors
Linear_Mod_PD_Cal<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density+Dataset1$Kcal)
summary(Linear_Mod_PD_Cal)
#Linear model for multiple predictors
Linear_Mod_PD_Cal<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density+Dataset1$Kcal)
summary(Linear_Mod_PD_Cal)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Logistic Regression Model:
#Tidy Data for Logistic Regression
Clean_data_Pairs<- Clean_data_Pairs %>%
mutate(Green_Protein = 0) %>%
mutate(Green_Fiber = 0) %>%
mutate(Weighloss_YN= 0)
#Function to change booleans for logistic regression
func_green<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response<treshold){
df[i,newcol]<- 0
} else if (Response>=treshold){
df[i,newcol]<- 1
}
}
return(df)
}
func_WL<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response>=treshold){
df[i,newcol]<- 0
} else if (Response<treshold){
df[i,newcol]<- 1
}
}
return(df)
}
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 5, #column where protein density
treshold = 7, #7 g per clcal
newcol = 7) #New column
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 6, #column where protein density
treshold = 1.8, #7 g per clcal
newcol = 8) #New column
Clean_data_Pairs<-func_WL(df = Clean_data_Pairs,
colno = 1, #column where protein density
treshold = 0, #7 g per clcal
newcol = 9) #New column
#Logisitic Regression for Weighloss yes or not.
gl <- glm(Weighloss_YN~Protein_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl)
summary(gl)
SurveyData<-read.csv("LogisticReg.csv")
head(SurveyData)
SurveyData<-SurveyData %>%
mutate(W_Change_12 =Weight_12-Initial_Weight, W_Change_Final =  Final_Weight-Initial_Weight, Protein_Green = NA, Fiber_Green =NA)
SurveyData<-func_green(df = SurveyData,
colno = 9, #column where protein density
treshold = 7, #7 g per clcal
newcol = 13) #New column
SurveyData<-func_green(df = SurveyData,
colno = 10,#column where protein density
treshold = 1.8, #7 g per clcal
newcol = 14) #New column
xtabs(~Protein_Green+Protein_12mon, data= SurveyData)
#Cross tabulation
SurveyData %>%
ggplot(aes(x = factor(Protein_12mon))) +
geom_bar() +
facet_wrap(~Protein_Green)
xtabs(~Fiber_Green+Fiber_12mon, data= SurveyData)
#Cross Tabulation.
SurveyData %>%
ggplot(aes(x = factor(Fiber_12mon))) +
geom_bar() +
facet_wrap(~Fiber_Green)
SurveyData$Fiber_12mon<-as.factor(SurveyData$Fiber_12mon)
SurveyData$Protein_12mon<-as.factor(SurveyData$Protein_12mon)
glP <- glm(Protein_Green~Protein_12mon, family = binomial(link="logit"), data=SurveyData)
AIC(glP)
summary(glP)
#every unit increase in predictor will increase the log odds of being green by 17.18
exp(glP$coefficients)
#The interpretation of rank is different from others, going to rank-2 college from rank-1 college will decrease the log odds of getting admit by -0.67. Going from rank-2 to rank-3 will decrease it by -1.340.
install.packages("pwr")
library(GGally)
library(ggplot2)
library(tidyverse)
library(pwr)
install.packages(WebPower)
install.packages("WebPower")
library(WebPower)
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
plot(Power_size,type='b')
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
summary(Power_size)
plot(Power_size,type='b')
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
Power_size
plot(Power_size,type='b')
#Logistic Regression Model:
#Tidy Data for Logistic Regression
Clean_data_Pairs<- Clean_data_Pairs %>%
mutate(Green_Protein = 0) %>%
mutate(Green_Fiber = 0) %>%
mutate(Weighloss_YN= 0)
#Function to change booleans for logistic regression
func_green<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response<treshold){
df[i,newcol]<- 0
} else if (Response>=treshold){
df[i,newcol]<- 1
}
}
return(df)
}
func_WL<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response>=treshold){
df[i,newcol]<- 0
} else if (Response<treshold){
df[i,newcol]<- 1
}
}
return(df)
}
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 5, #column where protein density
treshold = 7, #7 g per clcal
newcol = 7) #New column
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 6, #column where protein density
treshold = 1.8, #7 g per clcal
newcol = 8) #New column
Clean_data_Pairs<-func_WL(df = Clean_data_Pairs,
colno = 1, #column where protein density
treshold = 0, #7 g per clcal
newcol = 9) #New column
#Logisitic Regression for Weighloss yes or not.
gl <- glm(Weighloss_YN~Protein_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl)
summary(gl)
View(Clean_data_Pairs)
gl_FP<-glm(Weighloss_YN~Protein_Density+Fiber_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_FP)
summary(gl_FP)
View(Clean_data_Pairs)
gl_FPK<-glm(Weighloss_YN~Protein_Density+Fiber_Density+Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_FPK)
summary(gl_FPK)
gl_K<-glm(Weighloss_YN~Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_K)
summary(gl_K)
exp(coef(gl_k))
exp(coef(gl_K))
gl_K<-glm(Weighloss_YN~Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_K)
summary(gl_K)
log10(-2.66)
10^-.266
sqrt(40/3.14)
Cicle_Area = Area_Field*Percentage
#F_width
F_Width <- 254.5
F_Length <- 63.6
Area_Field <- 254.5*63.6
Percentage<-0.01 #0.001
Cicle_Area = Area_Field*Percentage
#formula to calculate radius
sqrt(Cicle_Area/3.14)
#F_width
F_Width <- 254.5
F_Length <- 63.6
Area_Field <- 254.5*63.6
Percentage<-0.001#0.01 #0.001
Cicle_Area = Area_Field*Percentage
#formula to calculate radius
sqrt(Cicle_Area/3.14)
10000*454
10000/454
log10(.002202643)
10^-0.66
10^-0.66*4000
#CFU/g
1/454
#Contamination to log10
log10(.002202643)
shiny::runApp('ILSI_remote_repo-master/ILSI_remote_repo-master')
install.packages(c("ppcor", "randomForest"))
setwd("~/GitHubFiles/CPS-Farm-to-Facility/Model")
library(ppcor)
library(sensitivity)
library(ggplot2)
library(randomForest)
library(forcats)
Data <- read.csv("SensitivityOut.csv", stringsAsFactors = TRUE)
Data<-Data[-c(1)]
View(Data)
library(ppcor)
library(sensitivity)
library(ggplot2)
library(randomForest)
library(forcats)
Data <- read.csv("SensitivityOut.csv", stringsAsFactors = TRUE)
Data<-Data[-c(1)]
View(Data)
PCC1<-pcc(X = Data[,1:10], y=Data$TotalCFUFP, rank =TRUE, conf = 0.95, nboot = 1000)
plot(PCC1)
#8 Visuals , remaing the columns to that no error in ggplot
names(PCC1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
#Ggplot, here is similar to a tornado plot. Also there are error bars on the 95th percentile
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Action")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
