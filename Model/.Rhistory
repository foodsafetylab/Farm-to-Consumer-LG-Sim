plot(x = Timeseq, y = sqrtrate)
sqrtrate<-c()
Timeseq<-seq(-5,35)
for (i in Timeseq){
ratemax<-(bval*(i-T_min))^2
sqrtrate<-c(sqrtrate,ratemax)
}
plot(x = Timeseq, y = sqrtrate)
#Ratworsky
bval <-0.023
Tmin <--5.647
Temp<-4
ratemax<-(bval*(Temp-T_min))
ratemax
#Ratworsky
bval <-0.023
Tmin <--5.647
Temp<-4
ratemax<-(bval*(Temp-T_min))^2
ratemax
Temp<-4
ratemax<-(bval*(Temp-T_min))
ratemax
#Ratworsky
bval <-0.023
Tmin <--5.647
Temp<-4
ratemax<-(bval*(Temp-T_min))
ratemax
sqrtrate<-c()
sqrtrate<-c()
Timeseq<-seq(-5,35)
for (i in Timeseq){
ratemax<-(bval*(i-T_min))
sqrtrate<-c(sqrtrate,ratemax)
}
plot(x = Timeseq, y = sqrtrate)
Temp<-4
ratemax<-(bval*(Temp-T_min))^2
ratemax
ratemax<-(bval*(Temp-T_min))^2/2.303
ratemax
#Ratworsky
bval <-0.023
Tmin <--5.647
Temp<-10
ratemax<-(bval*(Temp-T_min))^2/2.303
ratemax
#Ratworsky
bval <-0.023
Tmin <--5.647
Temp<-10
ratemax<-(bval*(Temp-T_min))^2/log(10)
ratemax
bval <- 0.03347 #+-0.0002
T_min <- -7.7
Temp<- 4
Time<-24
Temp<- 25
rate = (bval*(Temp-T_min))^2/2.303
rate
LagTime = 1/rate
LagTime
rate
Time<-24
Temp<- 4
rate = (bval*(Temp-T_min))^2/2.303
rate
LagTime = 1/rate
LagTime
1/0.35
1/0.035
1/1.1
runif(1,20,30)
runif(1,20,30)
library(ppcor)
library(sensitivity)
library(ggplot2)
library(randomForest)
Data <- read.csv("SensitivityOut.csv", stringsAsFactors = TRUE)
Data<-Data[-c(1)]
PCC1<-pcc(X = Data[,1:7], y=Data$TotalCFUFP, rank =TRUE, conf = 0.95, nboot = 1000)
plot(PCC1)
#8 Visuals , remaing the columns to that no error in ggplot
names(PCC1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
#Ggplot, here is similar to a tornado plot. Also there are error bars on the 95th percentile
pairs(Data)
sample (2,5)
sample (5,2)
roll_weighted<-function(sides = 5, prob= NULL)
if (prob == NULL){
return(sample (sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
roll_weighted<-function(sides = 5, prob= NULL){
if (prob == NULL){
return(sample (sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted()
roll_weighted<-function(sides = 5, prob= NULL){
if (prob == NULL){
return(sample (sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted()
roll_weighted()
roll_weighted<-function(sides = 5, prob = NULL){
if (prob == NULL){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted()
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted()
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , p = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
library(ggplot2)
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
rolls_sums<-c()
for ( i in 1:1000){
sums<-sum(roll_weighted(sides = 5, prob = c(0.4,0.15,0.15,0.15,0.15)))
rolls_sums<-c(rolls_sums,sums)
}
hist(rolls_sums)
library(ggplot2)
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
rolls_sums<-c()
for ( i in 1:10000){
sums<-sum(roll_weighted(sides = 5, prob = c(0.4,0.15,0.15,0.15,0.15)))
rolls_sums<-c(rolls_sums,sums)
}
hist(rolls_sums)
library(ggplot2)
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
rolls_sums<-c()
for ( i in 1:10000){
sums<-sum(roll_weighted(sides = 5, prob = c(0.4,0.15,0.15,0.15,0.15)))
rolls_sums<-c(rolls_sums,sums)
}
hist(rolls_sums)
library(ggplot2)
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
rolls_sums<-c()
for ( i in 1:10000){
sums<-sum(roll_weighted(sides = 5, prob = c(0.4,0.15,0.15,0.15,0.15)))
rolls_sums<-c(rolls_sums,sums)
}
hist(rolls_sums)
library(ggplot2)
roll_weighted<-function(sides = 5, prob = NULL){
if (is.null(prob)){
return(sample(sides,2, replace = TRUE))
}
else{
return(sample (sides,2, replace = TRUE, prob = prob))
}
}
roll_weighted(sides = 3 , prob = c(0.1,0.8,0.1))
rolls_sums<-c()
for ( i in 1:10000){
sums<-sum(roll_weighted(sides = 5, prob = c(0.4,0.15,0.15,0.15,0.15)))
rolls_sums<-c(rolls_sums,sums)
}
hist(rolls_sums)
library(mc2d)
rbetagen(1000,0.4,0.8,0.05,16.4)
hist(rbetagen(1000,0.4,0.8,0.05,16.4))
hist(rbetagen(1000,0.4,0.8,0.05,16.4),breaks = 40)
rbeta(0.4,0.8)
rbeta(10000,0.4,0.8)
hist(rbeta)
hist(rbeta(10000,0.4,0.8))
hist(rbetagen(1000,0.4,0.8,0.05,16.4),breaks = 40)
hist(rbeta(10000,0.4,0.8))
rbeta(1,0.4,0.8)*(16.4-0.05)+0.05
rbeta(10000,0.4,0.8)*(16.4-0.05)+0.05
hist(rbeta(10000,0.4,0.8)*(16.4-0.05)+0.05)
hist(rbetagen(10000,0.4,0.8,0.05,16.4),breaks = 40)
hist(rbeta(10000,0.4,0.8)*(16.4-0.05)+0.05, breaks= 40)
library(ppcor)
library(sensitivity)
library(ggplot2)
library(randomForest)
library(forcats)
setwd("~/GitHub/CPS-Farm-to-Facility/Model")
Data <- read.csv("SensitivityOut03-14.csv", stringsAsFactors = TRUE)
View(Data)
View(Data)
Data_x<-Data[-c(37,37)]
PCC1<-pcc(X = Data_x, y=Data$TotalCFUFP, rank =TRUE, conf = 0.8, nboot = 1000)
pairs(Data)
#8 Visuals , remaing the columns to that no error in ggplot
names(PCC1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
#Ggplot, here is similar to a tornado plot. Also there are error bars on the 95th percentile
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Model Input")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Model Input")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
View(Data_x)
View(Data_x)
Data <- read.csv("SensitivityOut03-14.csv", stringsAsFactors = TRUE)
Data_x<-Data[-c(36,37)]
View(Data_x)
Data <- read.csv("SensitivityOut03-14.csv", stringsAsFactors = TRUE)
Data_x<-Data[-c(1,36,37)]
View(Data_x)
PCC1<-pcc(X = Data_x, y=Data$TotalCFUFP, rank =TRUE, conf = 0.8, nboot = 100)
#8 Visuals , remaing the columns to that no error in ggplot
names(PCC1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
#Ggplot, here is similar to a tornado plot. Also there are error bars on the 95th percentile
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Model Input")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
Data <- read.csv("SensitivityOut03-14.csv", stringsAsFactors = TRUE)
Data_x<-Data[-c(1,36,37)]
PCC1<-pcc(X = Data_x, y=Data$TotalCFUFP, rank =TRUE, conf = 0.8, nboot = 100)
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Model Input")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
names(PCC1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
#Ggplot, here is similar to a tornado plot. Also there are error bars on the 95th percentile
ggplot(data = PCC1$PRCC, aes(x=fct_reorder(rownames(PCC1$PRCC), abs(original)),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient")+
xlab("Model Input")+
ggtitle("Sensitivity Analysis on Final CFU in System")+
coord_flip()+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=13))
